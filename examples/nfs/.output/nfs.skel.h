/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __NFS_BPF_SKEL_H__
#define __NFS_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct nfs_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *link_begin;
	} maps;
	struct {
		struct bpf_program *handle_nfs_read;
	} progs;
	struct {
		struct bpf_link *handle_nfs_read;
	} links;

#ifdef __cplusplus
	static inline struct nfs_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct nfs_bpf *open_and_load();
	static inline int load(struct nfs_bpf *skel);
	static inline int attach(struct nfs_bpf *skel);
	static inline void detach(struct nfs_bpf *skel);
	static inline void destroy(struct nfs_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
nfs_bpf__destroy(struct nfs_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
nfs_bpf__create_skeleton(struct nfs_bpf *obj);

static inline struct nfs_bpf *
nfs_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct nfs_bpf *obj;
	int err;

	obj = (struct nfs_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = nfs_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	nfs_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct nfs_bpf *
nfs_bpf__open(void)
{
	return nfs_bpf__open_opts(NULL);
}

static inline int
nfs_bpf__load(struct nfs_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct nfs_bpf *
nfs_bpf__open_and_load(void)
{
	struct nfs_bpf *obj;
	int err;

	obj = nfs_bpf__open();
	if (!obj)
		return NULL;
	err = nfs_bpf__load(obj);
	if (err) {
		nfs_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
nfs_bpf__attach(struct nfs_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
nfs_bpf__detach(struct nfs_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *nfs_bpf__elf_bytes(size_t *sz);

static inline int
nfs_bpf__create_skeleton(struct nfs_bpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "nfs_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 1;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "link_begin";
	s->maps[0].map = &obj->maps.link_begin;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "handle_nfs_read";
	s->progs[0].prog = &obj->progs.handle_nfs_read;
	s->progs[0].link = &obj->links.handle_nfs_read;

	s->data = nfs_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *nfs_bpf__elf_bytes(size_t *sz)
{
	static const char data[] __attribute__((__aligned__(8))) = "\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x48\x07\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x08\0\
\x01\0\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x74\x72\
\x61\x63\x65\x70\x6f\x69\x6e\x74\x2f\x6e\x66\x73\x2f\x6e\x66\x73\x5f\x69\x6e\
\x69\x74\x69\x61\x74\x65\x5f\x72\x65\x61\x64\0\x2e\x6d\x61\x70\x73\0\x6e\x66\
\x73\x2e\x62\x70\x66\x2e\x63\0\x4c\x42\x42\x30\x5f\x34\0\x4c\x42\x42\x30\x5f\
\x33\0\x68\x61\x6e\x64\x6c\x65\x5f\x6e\x66\x73\x5f\x72\x65\x61\x64\0\x6c\x69\
\x6e\x6b\x5f\x62\x65\x67\x69\x6e\0\x2e\x72\x65\x6c\x74\x72\x61\x63\x65\x70\x6f\
\x69\x6e\x74\x2f\x6e\x66\x73\x2f\x6e\x66\x73\x5f\x69\x6e\x69\x74\x69\x61\x74\
\x65\x5f\x72\x65\x61\x64\0\x2e\x42\x54\x46\0\x2e\x42\x54\x46\x2e\x65\x78\x74\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x38\0\0\0\x04\0\xf1\xff\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x42\0\0\0\0\0\x03\0\xd0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x49\0\0\0\0\0\x03\0\
\xa8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x50\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\xe0\0\
\0\0\0\0\0\0\x60\0\0\0\x11\0\x04\0\0\0\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x85\0\0\0\
\x0e\0\0\0\x77\0\0\0\x20\0\0\0\x7b\x0a\xf8\xff\0\0\0\0\x85\0\0\0\x05\0\0\0\x7b\
\x0a\xf0\xff\0\0\0\0\xbf\xa2\0\0\0\0\0\0\x07\x02\0\0\xf8\xff\xff\xff\x18\x01\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\0\0\0\x01\0\0\0\x55\0\x0f\0\0\0\0\0\xbf\xa2\0\0\
\0\0\0\0\x07\x02\0\0\xf8\xff\xff\xff\xbf\xa3\0\0\0\0\0\0\x07\x03\0\0\xf0\xff\
\xff\xff\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x04\0\0\x01\0\0\0\x85\0\0\0\
\x02\0\0\0\x15\0\x01\0\0\0\0\0\x55\0\x05\0\xef\xff\xff\xff\xbf\xa2\0\0\0\0\0\0\
\x07\x02\0\0\xf8\xff\xff\xff\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\0\0\0\x01\
\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x38\0\0\0\0\0\0\0\x01\0\0\0\x06\0\0\0\x78\0\0\0\0\
\0\0\0\x01\0\0\0\x06\0\0\0\xb8\0\0\0\0\0\0\0\x01\0\0\0\x06\0\0\0\x9f\xeb\x01\0\
\x18\0\0\0\0\0\0\0\x38\x01\0\0\x38\x01\0\0\x3b\x02\0\0\0\0\0\0\0\0\0\x02\x03\0\
\0\0\x01\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\
\0\0\x04\0\0\0\x01\0\0\0\x05\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\
\x02\x06\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\0\x28\0\0\0\0\0\0\
\0\0\0\x02\x08\0\0\0\x19\0\0\0\0\0\0\x08\x09\0\0\0\x1d\0\0\0\0\0\0\x08\x0a\0\0\
\0\x23\0\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\0\0\0\0\0\x04\0\0\x04\x20\0\0\0\x36\0\
\0\0\x01\0\0\0\0\0\0\0\x3b\0\0\0\x05\0\0\0\x40\0\0\0\x47\0\0\0\x07\0\0\0\x80\0\
\0\0\x4b\0\0\0\x07\0\0\0\xc0\0\0\0\x51\0\0\0\0\0\0\x0e\x0b\0\0\0\x01\0\0\0\0\0\
\0\0\0\0\0\x02\x0e\0\0\0\x5c\0\0\0\0\0\0\x07\0\0\0\0\0\0\0\0\x01\0\0\x0d\x02\0\
\0\0\x75\0\0\0\x0d\0\0\0\x79\0\0\0\x01\0\0\x0c\x0f\0\0\0\x14\x02\0\0\x01\0\0\
\x0f\x20\0\0\0\x0c\0\0\0\0\0\0\0\x20\0\0\0\0\x69\x6e\x74\0\x5f\x5f\x41\x52\x52\
\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x75\x36\x34\0\x5f\
\x5f\x75\x36\x34\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\x20\x6c\
\x6f\x6e\x67\0\x74\x79\x70\x65\0\x6d\x61\x78\x5f\x65\x6e\x74\x72\x69\x65\x73\0\
\x6b\x65\x79\0\x76\x61\x6c\x75\x65\0\x6c\x69\x6e\x6b\x5f\x62\x65\x67\x69\x6e\0\
\x74\x72\x61\x63\x65\x5f\x65\x76\x65\x6e\x74\x5f\x72\x61\x77\x5f\x6e\x66\x73\
\x5f\x72\x65\x61\x64\0\x63\x74\x78\0\x68\x61\x6e\x64\x6c\x65\x5f\x6e\x66\x73\
\x5f\x72\x65\x61\x64\0\x2f\x68\x6f\x6d\x65\x2f\x78\x69\x6e\x67\x2f\x6c\x69\x62\
\x62\x70\x66\x2d\x62\x6f\x6f\x74\x73\x74\x72\x61\x70\x2f\x65\x78\x61\x6d\x70\
\x6c\x65\x73\x2f\x6e\x66\x73\x2f\x6e\x66\x73\x2e\x62\x70\x66\x2e\x63\0\x20\x20\
\x20\x20\x75\x36\x34\x20\x6b\x65\x79\x20\x3d\x20\x62\x70\x66\x5f\x67\x65\x74\
\x5f\x63\x75\x72\x72\x65\x6e\x74\x5f\x70\x69\x64\x5f\x74\x67\x69\x64\x28\x29\
\x20\x3e\x3e\x20\x33\x32\x3b\0\x20\x20\x20\x20\x75\x36\x34\x20\x74\x69\x6d\x65\
\x73\x74\x61\x6d\x70\x20\x3d\x20\x62\x70\x66\x5f\x6b\x74\x69\x6d\x65\x5f\x67\
\x65\x74\x5f\x6e\x73\x28\x29\x3b\0\x2f\x68\x6f\x6d\x65\x2f\x78\x69\x6e\x67\x2f\
\x6c\x69\x62\x62\x70\x66\x2d\x62\x6f\x6f\x74\x73\x74\x72\x61\x70\x2f\x65\x78\
\x61\x6d\x70\x6c\x65\x73\x2f\x6e\x66\x73\x2f\x2e\x2f\x6d\x61\x70\x73\x2e\x62\
\x70\x66\x2e\x68\0\x20\x20\x20\x20\x76\x61\x6c\x20\x3d\x20\x62\x70\x66\x5f\x6d\
\x61\x70\x5f\x6c\x6f\x6f\x6b\x75\x70\x5f\x65\x6c\x65\x6d\x28\x6d\x61\x70\x2c\
\x20\x6b\x65\x79\x29\x3b\0\x20\x20\x20\x20\x69\x66\x28\x76\x61\x6c\x29\x7b\0\
\x20\x20\x20\x20\x65\x72\x72\x20\x3d\x20\x62\x70\x66\x5f\x6d\x61\x70\x5f\x75\
\x70\x64\x61\x74\x65\x5f\x65\x6c\x65\x6d\x28\x6d\x61\x70\x2c\x20\x6b\x65\x79\
\x2c\x20\x76\x61\x6c\x75\x65\x2c\x20\x42\x50\x46\x5f\x4e\x4f\x45\x58\x49\x53\
\x54\x29\x3b\0\x20\x20\x20\x20\x69\x66\x28\x65\x72\x72\x20\x26\x26\x20\x65\x72\
\x72\x20\x21\x3d\x20\x2d\x45\x45\x58\x49\x53\x54\x29\x7b\0\x20\x20\x20\x20\x72\
\x65\x74\x75\x72\x6e\x20\x62\x70\x66\x5f\x6d\x61\x70\x5f\x6c\x6f\x6f\x6b\x75\
\x70\x5f\x65\x6c\x65\x6d\x28\x6d\x61\x70\x2c\x20\x6b\x65\x79\x29\x3b\0\x20\x20\
\x20\x20\x72\x65\x74\x75\x72\x6e\x20\x30\x3b\0\x2e\x6d\x61\x70\x73\0\x74\x72\
\x61\x63\x65\x70\x6f\x69\x6e\x74\x2f\x6e\x66\x73\x2f\x6e\x66\x73\x5f\x69\x6e\
\x69\x74\x69\x61\x74\x65\x5f\x72\x65\x61\x64\0\0\0\0\0\0\x9f\xeb\x01\0\x20\0\0\
\0\0\0\0\0\x14\0\0\0\x14\0\0\0\xcc\0\0\0\xe0\0\0\0\0\0\0\0\x08\0\0\0\x1a\x02\0\
\0\x01\0\0\0\0\0\0\0\x10\0\0\0\x10\0\0\0\x1a\x02\0\0\x0c\0\0\0\0\0\0\0\x89\0\0\
\0\xbc\0\0\0\x0f\x54\0\0\x08\0\0\0\x89\0\0\0\xbc\0\0\0\x2a\x54\0\0\x10\0\0\0\
\x89\0\0\0\xbc\0\0\0\x09\x54\0\0\x18\0\0\0\x89\0\0\0\xec\0\0\0\x15\x58\0\0\x20\
\0\0\0\x89\0\0\0\xec\0\0\0\x09\x58\0\0\x30\0\0\0\x89\0\0\0\xbc\0\0\0\x0f\x54\0\
\0\x38\0\0\0\x14\x01\0\0\x4a\x01\0\0\x0b\x38\0\0\x50\0\0\0\x14\x01\0\0\x73\x01\
\0\0\x08\x3c\0\0\x60\0\0\0\x14\x01\0\0\x80\x01\0\0\x0b\x4c\0\0\x98\0\0\0\x14\
\x01\0\0\xbd\x01\0\0\x0c\x54\0\0\xb0\0\0\0\x14\x01\0\0\xdc\x01\0\0\x0c\x64\0\0\
\xd0\0\0\0\x89\0\0\0\x06\x02\0\0\x05\x60\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x01\0\0\0\x03\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\
\0\0\0\0\0\x9e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x09\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe0\0\0\0\0\0\0\0\xa8\0\0\
\0\0\0\0\0\x01\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\x11\0\0\0\x01\
\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x88\x01\0\0\0\0\0\0\xe0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x32\0\0\0\x01\0\0\0\x03\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x68\x02\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x6b\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x88\x02\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\x02\0\0\0\x03\0\0\0\x08\0\0\
\0\0\0\0\0\x10\0\0\0\0\0\0\0\x90\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\xb8\x02\0\0\0\0\0\0\x8b\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x95\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x48\x06\0\0\
\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";

	*sz = sizeof(data) - 1;
	return (const void *)data;
}

#ifdef __cplusplus
struct nfs_bpf *nfs_bpf::open(const struct bpf_object_open_opts *opts) { return nfs_bpf__open_opts(opts); }
struct nfs_bpf *nfs_bpf::open_and_load() { return nfs_bpf__open_and_load(); }
int nfs_bpf::load(struct nfs_bpf *skel) { return nfs_bpf__load(skel); }
int nfs_bpf::attach(struct nfs_bpf *skel) { return nfs_bpf__attach(skel); }
void nfs_bpf::detach(struct nfs_bpf *skel) { nfs_bpf__detach(skel); }
void nfs_bpf::destroy(struct nfs_bpf *skel) { nfs_bpf__destroy(skel); }
const void *nfs_bpf::elf_bytes(size_t *sz) { return nfs_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
nfs_bpf__assert(struct nfs_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __NFS_BPF_SKEL_H__ */
